In this screencast we'll get some intuition about how Meteor's DDP protocol
works with subscriptions and collections. The DDP protocol is changing, but our
goal for now is just to see how the parts fit together. So even when the
protocol changes, these concepts should still be helpful.

Let's visualize the parts of the Meteor system we'll be looking at. 

First I have the client or the browser. In the browser we can create
collections which are driven by Minimongo. We can also subscribe to messages
broadcast from the server.

Then I have the Meteor server. In the server we can create collections which
use MongoDB. And we can publish messages to connected clients.

The client and the server pass messages back and forth using the DDP protocol.
The messages are simple JSON objects.

We'll start off with a simple subscription to a MongoDB collection called Posts
with a user interface that just shows a message for each post. 

Let's take a quick tour through the code and then we'll take a look at the DDP
messages that are being sent by the server.

On the left is the app.html file. In the body I'm rendering the posts template.
Inside the template I iterate over all the posts, creating a list item and
displaying the message for each post.

On the right is the app.js file. First I create a new Meteor.Collection called
posts. This code will run on both the client and the server. But on the client,
the collection will be driven by Minimongo which is a light, in-memory version
of MongoDB that runs completely in the browser.

Inside the client I've defined the posts helper on the posts template which
reactively returns the results of the Minimongo Posts collection. Then, I
create a subscription by calling Meteor.subscribe and passing the name of the
subscription as the first parameter, an array of parameters as the second, and
finally a callback that will get called when the subscription is complete. This
happens when all of the initial documents have been sent.

On the server, when it starts, I'll load up my Mongo Posts collection with a
few dummy documents. Then I'll create a publication by calling Meteor.publish
with the name of the publication as the first parameter, and a callback
function as the second. The callback function will get called any time a new
client subscribes. In this example, the callback returns Posts.find(). This
will automatically publish all existing documents, as well as send messages for
added, changed or removed documents.

Let's try to get a better sense of what's going on by inspecting the DDP
messages being sent when we subscribe to posts. To do that we'll create a
simple DDP client that prints out the messages to the console.

I've created a fork of Tom Coleman's node-ddp-client, and added the ability to
inspect DDP messages as they come off the wire.

Since I haven't published my fork to npm, I'm going to first add it as a
submodule to my git project. I'll type 'git submodule add' followed by the
location of the repository and then the destination, in this case inside my
ddp_client folder. I get a message saying it already exists, because I've
already added the submodule, but if you're doing it for the first time, you
won't get this error. Next, I'm going to grab the code for the submodule by
typing git submodule update with the '--init' switch. Once again I get an error
saying I've already done this.But if you're initializing the submodule for the
first time, you won't get this error.

Finally, I'll change into my ddp_client folder and type 'npm link' followed by
the path to the ddp-client module. That will install the module and all of its
dependencies in a central folder, and then symlink to it from the node_modules
directory. Great, now I can require the ddp module in my code. Now let's create
our client.js file and pop into VIM.

First, I'll require the 'ddp' module. Next, I'll create a new DDPClient,
passing an options object with a host of localhost and a port of 3000. Then,
I'll add a callback using the onMessage method I created in my fork to print
ddp messages to the console as they come off the wire. Finally, I'll call the
connect method, and once we're connected I'll call the subscribe method with
the name of the subscription as the first parameter, an array of parameters as
the second, and callback function that will get called when the subscription is
marked as complete. Let's try it out.

In the upper right I'm running my Meteor server. In the upper left we see
things working as expected in the browser. In the bottom terminal let's fire up
our ddp client. The key thing to notice is that for each post in the Posts
collection we get a ddp message telling us to "set" certain fields in a
document with a given id and a for a collection named "posts". Then we get a
final message telling us we've received all the initial posts. In other words,
our subscription is complete and our subscription callback is called.

Okay, let's try creating our own publisher that doesn't user a server side
Mongo collection.

Over the app.js file the first thing I'll do is move the Posts collection into
the client. This means it will only exist locally on the browser, not in our
server side Mongo store. Next, we won't need the server startup code anymore
since we've removed the server side collection. Now let's send some custom
messages in our publisher function.

First, by convention I'll store 'this' in a variable called 'self.' Then I'll
create a new unique identifier that we'll use a little later. Next, I'll call
the set method of self to send a "set" message. The first parameter will be the
name of the collection we wish to perform a set operation on. The next
parameter is the id of the document. The last parameter is an object containing
the fields we want to set. So far, we've only be queuing up the messages. We
tell Meteor to send them down to the client by calling the 'flush' method.

Let's take a look. 

We can see our messages appear in the browser as expected.  If we start our ddp
client we can see the two messages we set in the publisher function. But wait,
we're missing something. Notice in the browser our subscription complete
callback dind't print anythign to the console? And in our ddp client we don't
see the callback message printed either. Although it's not preventing us from
receiving the messages, let's update our code to send the subscription complete
message to the client.

In our publish callback all we need to do is call the 'complete' method on
'self.' This will queue up a complete message that will be sent to the client
along with the rest of our messages.

Over in the browser we can see the callback prints the message to the console,
and we can see in our ddp client that the last message is the subscription
complete message.
